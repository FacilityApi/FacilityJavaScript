// DO NOT EDIT: generated by fsdgenjs
/* eslint-disable */

import { FastifyPluginAsync } from 'fastify';
import { IServiceResult } from 'facility-core';
import { IConformanceApi, IGetApiInfoRequest, IGetApiInfoResponse, IGetWidgetsRequest, IGetWidgetsResponse, ICreateWidgetRequest, ICreateWidgetResponse, IGetWidgetRequest, IGetWidgetResponse, IDeleteWidgetRequest, IDeleteWidgetResponse, IGetWidgetBatchRequest, IGetWidgetBatchResponse, IMirrorFieldsRequest, IMirrorFieldsResponse, ICheckQueryRequest, ICheckQueryResponse, ICheckPathRequest, ICheckPathResponse, IMirrorHeadersRequest, IMirrorHeadersResponse, IMixedRequest, IMixedResponse, IRequiredRequest, IRequiredResponse, IMirrorBytesRequest, IMirrorBytesResponse, IMirrorTextRequest, IMirrorTextResponse, IBodyTypesRequest, IBodyTypesResponse, IWidget, IAny, IAnyArray, IAnyMap, IAnyResult, IAnyNullable, IHasWidget, Answer, ApiErrors } from '../conformanceApiTypes';
export * from '../conformanceApiTypes';

const standardErrorCodes: { [code: string]: number } = {
  'NotModified': 304,
  'InvalidRequest': 400,
  'NotAuthenticated': 401,
  'NotAuthorized': 403,
  'NotFound': 404,
  'Conflict': 409,
  'RequestTooLarge': 413,
  'TooManyRequests': 429,
  'InternalError': 500,
  'ServiceUnavailable': 503,
  'NotAdmin': 403,
  'TooHappy': 500,
};

function parseBoolean(value: string | undefined) {
  if (typeof value === 'string') {
    const lowerValue = value.toLowerCase();
    if (lowerValue === 'true') {
      return true;
    }
    if (lowerValue === 'false') {
      return false;
    }
  }
  return undefined;
}

export type ConformanceApiPluginOptions = {
  api: IConformanceApi;
}

export const conformanceApiPlugin: FastifyPluginAsync<ConformanceApiPluginOptions> = async (fastify, opts) => {
  throw new Error('Not implemented');
}
