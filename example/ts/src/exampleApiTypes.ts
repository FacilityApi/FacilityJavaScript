// DO NOT EDIT: generated by fsdgenjs

import { IServiceResult, IServiceError } from 'facility-core';

/** Example service for widgets. */
export interface IExampleApi {
	/** Gets widgets. */
	getWidgets(request: IGetWidgetsRequest): Promise<IServiceResult<IGetWidgetsResponse>>;

	/** Creates a new widget. */
	createWidget(request: ICreateWidgetRequest): Promise<IServiceResult<ICreateWidgetResponse>>;

	/** Gets the specified widget. */
	getWidget(request: IGetWidgetRequest): Promise<IServiceResult<IGetWidgetResponse>>;

	/** Deletes the specified widget. */
	deleteWidget(request: IDeleteWidgetRequest): Promise<IServiceResult<IDeleteWidgetResponse>>;

	/** Edits widget. */
	editWidget(request: IEditWidgetRequest): Promise<IServiceResult<IEditWidgetResponse>>;

	/** Gets the specified widgets. */
	getWidgetBatch(request: IGetWidgetBatchRequest): Promise<IServiceResult<IGetWidgetBatchResponse>>;

	/**
	 * Gets the widget weight.
	 * @deprecated
	 */
	getWidgetWeight(request: IGetWidgetWeightRequest): Promise<IServiceResult<IGetWidgetWeightResponse>>;

	/** Gets a widget preference. */
	getPreference(request: IGetPreferenceRequest): Promise<IServiceResult<IGetPreferenceResponse>>;

	/** Sets a widget preference. */
	setPreference(request: ISetPreferenceRequest): Promise<IServiceResult<ISetPreferenceResponse>>;

	/** Gets service info. */
	getInfo(request: IGetInfoRequest): Promise<IServiceResult<IGetInfoResponse>>;

	/** Demonstrates the default HTTP behavior. */
	notRestful(request: INotRestfulRequest): Promise<IServiceResult<INotRestfulResponse>>;

	kitchen(request: IKitchenRequest): Promise<IServiceResult<IKitchenResponse>>;
}

/** Request for GetWidgets. */
export interface IGetWidgetsRequest {
	/** The query. */
	query?: string;

	/** The limit of returned results. */
	limit?: number;

	/** The sort field. */
	sort?: string;

	/** True to sort descending. */
	desc?: boolean;

	/**
	 * The maximum weight.
	 * @deprecated
	 */
	maxWeight?: number;

	/** The minimum price. */
	minPrice?: number;
}

/** Response for GetWidgets. */
export interface IGetWidgetsResponse {
	/** The widgets. */
	widgets?: IWidget[];

	/** The total number of widgets. */
	total?: number;

	/**
	 * The total weight.
	 * @deprecated
	 */
	totalWeight?: number;

	/** The pending job. */
	job?: IWidgetJob;
}

/** Request for CreateWidget. */
export interface ICreateWidgetRequest {
	/** The widget to create. */
	widget?: IWidget;
}

/** Response for CreateWidget. */
export interface ICreateWidgetResponse {
	/** The created widget. */
	widget?: IWidget;
}

/** Request for GetWidget. */
export interface IGetWidgetRequest {
	/** The widget ID. */
	id?: string;

	ifNoneMatch?: string;
}

/** Response for GetWidget. */
export interface IGetWidgetResponse {
	/** The requested widget. */
	widget?: IWidget;

	eTag?: string;

	notModified?: boolean;
}

/** Request for DeleteWidget. */
export interface IDeleteWidgetRequest {
	/** The widget ID. */
	id?: string;
}

/** Response for DeleteWidget. */
export interface IDeleteWidgetResponse {
}

/** Request for EditWidget. */
export interface IEditWidgetRequest {
	/** The widget ID. */
	id?: string;

	/** The operations. */
	ops?: { [name: string]: any }[];

	/**
	 * The new weight.
	 * @deprecated
	 */
	weight?: number;
}

/** Response for EditWidget. */
export interface IEditWidgetResponse {
	/** The edited widget. */
	widget?: IWidget;

	/** The pending job. */
	job?: IWidgetJob;
}

/** Request for GetWidgetBatch. */
export interface IGetWidgetBatchRequest {
	/** The IDs of the widgets to return. */
	ids?: string[];
}

/** Response for GetWidgetBatch. */
export interface IGetWidgetBatchResponse {
	/** The widget results. */
	results?: IServiceResult<IWidget>[];
}

/** Request for GetWidgetWeight. */
export interface IGetWidgetWeightRequest {
	/** The widget ID. */
	id?: string;
}

/** Response for GetWidgetWeight. */
export interface IGetWidgetWeightResponse {
	/** The widget weight. */
	value?: number;
}

/** Request for GetPreference. */
export interface IGetPreferenceRequest {
	/** The preference key. */
	key?: string;
}

/** Response for GetPreference. */
export interface IGetPreferenceResponse {
	/** The preference value. */
	value?: IPreference;
}

/** Request for SetPreference. */
export interface ISetPreferenceRequest {
	/** The preference key. */
	key?: string;

	/** The preference value. */
	value?: IPreference;
}

/** Response for SetPreference. */
export interface ISetPreferenceResponse {
	/** The preference value. */
	value?: IPreference;
}

/** Request for GetInfo. */
export interface IGetInfoRequest {
}

/** Response for GetInfo. */
export interface IGetInfoResponse {
	/** The name of the service. */
	name?: string;
}

/** Request for NotRestful. */
export interface INotRestfulRequest {
}

/** Response for NotRestful. */
export interface INotRestfulResponse {
}

/** Request for Kitchen. */
export interface IKitchenRequest {
	sink?: IKitchenSink;
}

/** Response for Kitchen. */
export interface IKitchenResponse {
}

/** A widget. */
export interface IWidget {
	/** A unique identifier for the widget. */
	id?: string;

	/** The name of the widget. */
	name?: string;

	/**
	 * The weight of the widget.
	 * @deprecated
	 */
	weight?: number;

	/** The price of the widget. */
	price?: number;
}

/** A widget job. */
export interface IWidgetJob {
	/** A unique identifier for the widget job. */
	id?: string;
}

/** A preference. */
export interface IPreference {
	boolean?: boolean;

	booleans?: boolean[];

	double?: number;

	doubles?: number[];

	integer?: number;

	integers?: number[];

	string?: string;

	strings?: string[];

	bytes?: string;

	byteses?: string[];

	widgetField?: string;

	widgetFields?: string[];

	widget?: IWidget;

	widgets?: IWidget[];

	result?: IServiceResult<IWidget>;

	results?: IServiceResult<IWidget>[];

	bigInteger?: number;

	bigIntegers?: number[];

	decimal?: number;

	decimals?: number[];

	error?: IServiceError;

	errors?: IServiceError[];

	object?: { [name: string]: any };

	objects?: { [name: string]: any }[];

	namedStrings?: { [name: string]: string };

	namedWidgets?: { [name: string]: IWidget };
}

/**
 * An obsolete DTO.
 * @deprecated
 */
export interface IObsoleteData {
	unused?: boolean;
}

export interface IKitchenSink {
	matrix?: number[][][];

	crazy?: IServiceResult<{ [name: string]: string[] }[]>[];

	/** @deprecated This field was never used. */
	oldField?: string;
}

