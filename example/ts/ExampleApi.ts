// DO NOT EDIT: generated by fsdgenjs

import { HttpClientUtility, IServiceResult, IServiceError, IHttpClientOptions } from 'facility-core';

/** Provides access to ExampleApi over HTTP via fetch. */
export function createHttpClient({ fetch, baseUri }: IHttpClientOptions): IExampleApi {
	return new ExampleApiHttpClient(fetch, baseUri);
}

/** Example service for widgets. */
export interface IExampleApi {
	/** Gets widgets. */
	getWidgets(request: IGetWidgetsRequest): Promise<IServiceResult<IGetWidgetsResponse>>;
	/** Creates a new widget. */
	createWidget(request: ICreateWidgetRequest): Promise<IServiceResult<ICreateWidgetResponse>>;
	/** Gets the specified widget. */
	getWidget(request: IGetWidgetRequest): Promise<IServiceResult<IGetWidgetResponse>>;
	/** Deletes the specified widget. */
	deleteWidget(request: IDeleteWidgetRequest): Promise<IServiceResult<IDeleteWidgetResponse>>;
	/** Edits widget. */
	editWidget(request: IEditWidgetRequest): Promise<IServiceResult<IEditWidgetResponse>>;
	/** Gets the specified widgets. */
	getWidgetBatch(request: IGetWidgetBatchRequest): Promise<IServiceResult<IGetWidgetBatchResponse>>;
	/** Gets the widget weight. */
	getWidgetWeight(request: IGetWidgetWeightRequest): Promise<IServiceResult<IGetWidgetWeightResponse>>;
	/** Gets a widget preference. */
	getPreference(request: IGetPreferenceRequest): Promise<IServiceResult<IGetPreferenceResponse>>;
	/** Sets a widget preference. */
	setPreference(request: ISetPreferenceRequest): Promise<IServiceResult<ISetPreferenceResponse>>;
	/** Demonstrates the default HTTP behavior. */
	notRestful(request: INotRestfulRequest): Promise<IServiceResult<INotRestfulResponse>>;
	/**  */
	kitchen(request: IKitchenRequest): Promise<IServiceResult<IKitchenResponse>>;
}

/** Request for GetWidgets. */
export interface IGetWidgetsRequest {
	/** The query. */
	query?: string;
	/** The limit of returned results. */
	limit?: number;
	/** The sort field. */
	sort?: string;
	/** True to sort descending. */
	desc?: boolean;
	/** The maximum weight. */
	maxWeight?: number;
}

/** Response for GetWidgets. */
export interface IGetWidgetsResponse {
	/** The widgets. */
	widgets?: IWidget[];
	/** The total number of widgets. */
	total?: number;
	/** The total weight. */
	totalWeight?: number;
	/** The pending job. */
	job?: IWidgetJob;
}

/** Request for CreateWidget. */
export interface ICreateWidgetRequest {
	/** The widget to create. */
	widget?: IWidget;
}

/** Response for CreateWidget. */
export interface ICreateWidgetResponse {
	/** The created widget. */
	widget?: IWidget;
}

/** Request for GetWidget. */
export interface IGetWidgetRequest {
	/** The widget ID. */
	id?: string;
	/**  */
	ifNoneMatch?: string;
}

/** Response for GetWidget. */
export interface IGetWidgetResponse {
	/** The requested widget. */
	widget?: IWidget;
	/**  */
	eTag?: string;
	/**  */
	notModified?: boolean;
}

/** Request for DeleteWidget. */
export interface IDeleteWidgetRequest {
	/** The widget ID. */
	id?: string;
}

/** Response for DeleteWidget. */
export interface IDeleteWidgetResponse {
}

/** Request for EditWidget. */
export interface IEditWidgetRequest {
	/** The widget ID. */
	id?: string;
	/** The operations. */
	ops?: any[];
	/** The new weight. */
	weight?: number;
}

/** Response for EditWidget. */
export interface IEditWidgetResponse {
	/** The edited widget. */
	widget?: IWidget;
	/** The pending job. */
	job?: IWidgetJob;
}

/** Request for GetWidgetBatch. */
export interface IGetWidgetBatchRequest {
	/** The IDs of the widgets to return. */
	ids?: string[];
}

/** Response for GetWidgetBatch. */
export interface IGetWidgetBatchResponse {
	/** The widget results. */
	results?: IServiceResult<IWidget>[];
}

/** Request for GetWidgetWeight. */
export interface IGetWidgetWeightRequest {
	/** The widget ID. */
	id?: string;
}

/** Response for GetWidgetWeight. */
export interface IGetWidgetWeightResponse {
	/** The widget weight. */
	value?: number;
}

/** Request for GetPreference. */
export interface IGetPreferenceRequest {
	/** The preference key. */
	key?: string;
}

/** Response for GetPreference. */
export interface IGetPreferenceResponse {
	/** The preference value. */
	value?: IPreference;
}

/** Request for SetPreference. */
export interface ISetPreferenceRequest {
	/** The preference key. */
	key?: string;
	/** The preference value. */
	value?: IPreference;
}

/** Response for SetPreference. */
export interface ISetPreferenceResponse {
	/** The preference value. */
	value?: IPreference;
}

/** Request for NotRestful. */
export interface INotRestfulRequest {
}

/** Response for NotRestful. */
export interface INotRestfulResponse {
}

/** Request for Kitchen. */
export interface IKitchenRequest {
	/**  */
	sink?: IKitchenSink;
}

/** Response for Kitchen. */
export interface IKitchenResponse {
}

/** A widget. */
export interface IWidget {
	/** A unique identifier for the widget. */
	id?: string;
	/** The name of the widget. */
	name?: string;
	/** The weight of the widget. */
	weight?: number;
}

/** A widget job. */
export interface IWidgetJob {
	/** A unique identifier for the widget job. */
	id?: string;
}

/** A preference. */
export interface IPreference {
	/**  */
	boolean?: boolean;
	/**  */
	booleans?: boolean[];
	/**  */
	double?: number;
	/**  */
	doubles?: number[];
	/**  */
	integer?: number;
	/**  */
	integers?: number[];
	/**  */
	string?: string;
	/**  */
	strings?: string[];
	/**  */
	bytes?: string;
	/**  */
	byteses?: string[];
	/**  */
	widgetField?: string;
	/**  */
	widgetFields?: string[];
	/**  */
	widget?: IWidget;
	/**  */
	widgets?: IWidget[];
	/**  */
	result?: IServiceResult<IWidget>;
	/**  */
	results?: IServiceResult<IWidget>[];
	/**  */
	bigInteger?: number;
	/**  */
	bigIntegers?: number[];
	/**  */
	error?: IServiceError;
	/**  */
	errors?: IServiceError[];
	/**  */
	object?: any;
	/**  */
	objects?: any[];
	/**  */
	namedStrings?: any;
	/**  */
	namedWidgets?: any;
}

/** An obsolete DTO. */
export interface IObsoleteData {
	/**  */
	unused?: boolean;
}

/**  */
export interface IKitchenSink {
	/**  */
	oldField?: string;
}

const { fetchJson, createResponseError } = HttpClientUtility;
type IFetch = HttpClientUtility.IFetch;
type IFetchRequest = HttpClientUtility.IFetchRequest;

class ExampleApiHttpClient implements IExampleApi {
	constructor(fetch: IFetch, baseUri: string) {
		if (typeof fetch !== 'function') {
			throw new TypeError('fetch must be a function.');
		}
		if (typeof baseUri === 'undefined') {
			baseUri = 'http://local.example.com/v1';
		}
		if (/[^\/]$/.test(baseUri)) {
			baseUri += '/';
		}
		this._fetch = fetch;
		this._baseUri = baseUri;
	}
	/** Gets widgets. */
	public getWidgets(request: IGetWidgetsRequest): Promise<IServiceResult<IGetWidgetsResponse>> {
		var uri = '/widgets';
		const query: string[] = [];
		request.query == null || query.push('q=' + encodeURIComponent(request.query));
		request.limit == null || query.push('limit=' + encodeURIComponent(request.limit));
		request.sort == null || query.push('sort=' + encodeURIComponent(request.sort));
		request.desc == null || query.push('desc=' + encodeURIComponent(request.desc));
		request.maxWeight == null || query.push('maxWeight=' + encodeURIComponent(request.maxWeight));
		if (query.length) {
			uri = uri + '?' + query.join('&');
		}
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'GET',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: result.json as IGetWidgetsResponse };
				}
				if (status === 202) {
					return { value: { job: result.json } as IGetWidgetsResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IGetWidgetsResponse>;
			});
	}
	/** Creates a new widget. */
	public createWidget(request: ICreateWidgetRequest): Promise<IServiceResult<ICreateWidgetResponse>> {
		const uri = '/widgets/';
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: request.widget
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 201) {
					return { value: { widget: result.json } as ICreateWidgetResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<ICreateWidgetResponse>;
			});
	}
	/** Gets the specified widget. */
	public getWidget(request: IGetWidgetRequest): Promise<IServiceResult<IGetWidgetResponse>> {
		const uri = `/widgets/{encodeURIComponent(request.id)}`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'GET',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: { widget: result.json } as IGetWidgetResponse };
				}
				if (status === 304) {
					return { value: { notModified: true } as IGetWidgetResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IGetWidgetResponse>;
			});
	}
	/** Deletes the specified widget. */
	public deleteWidget(request: IDeleteWidgetRequest): Promise<IServiceResult<IDeleteWidgetResponse>> {
		const uri = `/widgets/{encodeURIComponent(request.id)}`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'DELETE',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200 || status === 204) {
					return { value: {} as IDeleteWidgetResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IDeleteWidgetResponse>;
			});
	}
	/** Edits widget. */
	public editWidget(request: IEditWidgetRequest): Promise<IServiceResult<IEditWidgetResponse>> {
		const uri = `/widgets/{encodeURIComponent(request.id)}`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: {
				ops: request.ops,
				weight: request.weight
			}
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: { widget: result.json } as IEditWidgetResponse };
				}
				if (status === 202) {
					return { value: { job: result.json } as IEditWidgetResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IEditWidgetResponse>;
			});
	}
	/** Gets the specified widgets. */
	public getWidgetBatch(request: IGetWidgetBatchRequest): Promise<IServiceResult<IGetWidgetBatchResponse>> {
		const uri = '/widgets/get';
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: body
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: result.json as IGetWidgetBatchResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IGetWidgetBatchResponse>;
			});
	}
	/** Gets the widget weight. */
	public getWidgetWeight(request: IGetWidgetWeightRequest): Promise<IServiceResult<IGetWidgetWeightResponse>> {
		const uri = `/widgets/{encodeURIComponent(request.id)}/weight`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'GET',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: result.json as IGetWidgetWeightResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IGetWidgetWeightResponse>;
			});
	}
	/** Gets a widget preference. */
	public getPreference(request: IGetPreferenceRequest): Promise<IServiceResult<IGetPreferenceResponse>> {
		const uri = `/prefs/{encodeURIComponent(request.key)}`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'GET',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: { value: result.json } as IGetPreferenceResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IGetPreferenceResponse>;
			});
	}
	/** Sets a widget preference. */
	public setPreference(request: ISetPreferenceRequest): Promise<IServiceResult<ISetPreferenceResponse>> {
		const uri = `/prefs/{encodeURIComponent(request.key)}`;
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'PUT',
			headers: { 'Content-Type': 'application/json' },
			body: request.value
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200) {
					return { value: { value: result.json } as ISetPreferenceResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<ISetPreferenceResponse>;
			});
	}
	/** Demonstrates the default HTTP behavior. */
	public notRestful(request: INotRestfulRequest): Promise<IServiceResult<INotRestfulResponse>> {
		const uri = '/notRestful';
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: null
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200 || status === 204) {
					return { value: {} as INotRestfulResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<INotRestfulResponse>;
			});
	}
	/**  */
	public kitchen(request: IKitchenRequest): Promise<IServiceResult<IKitchenResponse>> {
		const uri = '/kitchen';
		const body = JSON.stringify(request);
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: body
		};
		return fetchJson(this._fetch, this._baseUri + uri, fetchRequest)
			.then(result => {
				const status = result.response.status;
				if (status === 200 || status === 204) {
					return { value: {} as IKitchenResponse };
				}
				return createResponseError(status, result.json) as IServiceResult<IKitchenResponse>;
			});
	}
	private _fetch: IFetch;
	private _baseUri: string;
}
